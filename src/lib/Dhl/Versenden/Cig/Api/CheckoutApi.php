<?php
/**
 * CheckoutApi
 * PHP version 5
 *
 * @category Class
 * @package  Dhl\Versenden\Cig
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/*
 *
 * OpenAPI spec version: 1.1.4
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Dhl\Versenden\Cig\Api;

use Dhl\Versenden\Cig\ApiException;
use Dhl\Versenden\Cig\Configuration;
use Dhl\Versenden\Cig\HeaderSelector;
use Dhl\Versenden\Cig\ObjectSerializer;

/**
 * CheckoutApi Class Doc Comment
 *
 * @category Class
 * @package  Dhl\Versenden\Cig
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CheckoutApi
{
    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param Configuration $config
     * @param HeaderSelector $selector
     */
    public function __construct(
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation checkoutRecipientZipAvailableServicesGet
     *
     * Queries available services for the given `recipientZip`.
     *
     * @param  string $xEKP DHL customer number of the sender (required)
     * @param  string $recipientZip ZIP code of recipient. (required)
     * @param  \DateTime $startDate Day when the shipment will be dropped be the sender in the DHL parcel center
     *     (required)
     * @param  string $xRequestID HTTP-Header for HTTP request correlation (optional)
     *
     * @throws \Dhl\Versenden\Cig\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Dhl\Versenden\Cig\Model\AvailableServicesMap
     */
    public function checkoutRecipientZipAvailableServicesGet($xEKP, $recipientZip, $startDate, $xRequestID = null)
    {
        list($response) = $this->checkoutRecipientZipAvailableServicesGetWithHttpInfo(
            $xEKP,
            $recipientZip,
            $startDate,
            $xRequestID
        );

        return $response;
    }

    /**
     * Operation checkoutRecipientZipAvailableServicesGetWithHttpInfo
     *
     * Queries available services for the given `recipientZip`.
     *
     * @param  string $xEKP DHL customer number of the sender (required)
     * @param  string $recipientZip ZIP code of recipient. (required)
     * @param  \DateTime $startDate Day when the shipment will be dropped be the sender in the DHL parcel center
     *     (required)
     * @param  string $xRequestID HTTP-Header for HTTP request correlation (optional)
     *
     * @throws \Dhl\Versenden\Cig\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Dhl\Versenden\Cig\Model\AvailableServicesMap, HTTP status code, HTTP response headers (array
     *     of strings)
     */
    public function checkoutRecipientZipAvailableServicesGetWithHttpInfo(
        $xEKP,
        $recipientZip,
        $startDate,
        $xRequestID = null
    ) {
        $returnType = '\Dhl\Versenden\Cig\Model\AvailableServicesMap';
        $request = $this->checkoutRecipientZipAvailableServicesGetRequest(
            $xEKP,
            $recipientZip,
            $startDate,
            $xRequestID
        );

        try {
            try {
                $request->request();
            } catch (\Zend_Http_Client_Exception $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $request->getLastResponse() && $request->getLastResponse()->getHeaders() ?: null,
                    $request->getLastResponse() && $request->getLastResponse()->getBody() ?: null
                );
            }

            $statusCode = $request->getLastResponse()->getStatus();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $request->getLastResponse() && $request->getLastResponse()->getHeaders(),
                    $request->getLastResponse() && $request->getLastResponse()->getBody()
                );
            }

            $responseBody = $request->getLastResponse()->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody;
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, array()),
                $statusCode,
                $request->getLastResponse()->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dhl\Versenden\Cig\Model\AvailableServicesMap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dhl\Versenden\Cig\Model\Status',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Create request for operation 'checkoutRecipientZipAvailableServicesGet'
     *
     * @param  string $xEKP DHL customer number of the sender (required)
     * @param  string $recipientZip ZIP code of recipient. (required)
     * @param  \DateTime $startDate Day when the shipment will be dropped be the sender in the DHL parcel center
     *     (required)
     * @param  string $xRequestID HTTP-Header for HTTP request correlation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \Varien_Http_Client
     */
    protected function checkoutRecipientZipAvailableServicesGetRequest(
        $xEKP,
        $recipientZip,
        $startDate,
        $xRequestID = null
    ) {
        $request = new \Varien_Http_Client();
        // verify the required parameter 'xEKP' is set
        if ($xEKP === null || (is_array($xEKP) && count($xEKP) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xEKP when calling checkoutRecipientZipAvailableServicesGet'
            );
        }
        // verify the required parameter 'recipientZip' is set
        if ($recipientZip === null || (is_array($recipientZip) && count($recipientZip) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recipientZip when calling checkoutRecipientZipAvailableServicesGet'
            );
        }
        if (!preg_match("/^[0-9]{5}$/", $recipientZip)) {
            throw new \InvalidArgumentException(
                "invalid value for \"recipientZip\" when calling CheckoutApi.checkoutRecipientZipAvailableServicesGet, must conform to the pattern /^[0-9]{5}$/."
            );
        }

        // verify the required parameter 'startDate' is set
        if ($startDate === null || (is_array($startDate) && count($startDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $startDate when calling checkoutRecipientZipAvailableServicesGet'
            );
        }

        $resourcePath = '/checkout/{recipientZip}/availableServices';
        $queryParams = array();
        // query params
        if ($startDate !== null) {
            $queryParams['startDate'] = ObjectSerializer::toQueryValue($startDate);
        }
        // header params
        if ($xRequestID !== null) {
            $request->setHeaders('X-Request-ID', ObjectSerializer::toHeaderValue($xRequestID));
        }
        // header params
        if ($xEKP !== null) {
            $request->setHeaders('X-EKP', ObjectSerializer::toHeaderValue($xEKP));
        }

        // path params
        if ($recipientZip !== null) {
            $resourcePath = str_replace(
                '{' . 'recipientZip' . '}',
                ObjectSerializer::toPathValue($recipientZip),
                $resourcePath
            );
        }

        $request->setHeaders('Content-Type', 'application/json');
        $request->setHeaders('Accepts', 'application/json');

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $request->setHeaders(
                'Authorization',
                'Basic ' .
                base64_encode($this->config->getUsername() . ":" . $this->config->getPassword())
            );
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('DPDHL-User-Authentication-Token');
        if ($apiKey !== null) {
            $request->setHeaders('DPDHL-User-Authentication-Token', $apiKey);
            //            $headers['DPDHL-User-Authentication-Token'] = $apiKey;
        }

        $query = http_build_query($queryParams);
        $request->setUri($this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''));

        return $request;
    }

    /**
     * Operation checkoutRecipientZipDeliveryDayEstimationGet
     *
     * Queries estimation of delivery day in checkout
     *
     * @param  string $xEKP DHL customer number of the sender (required)
     * @param  string $recipientZip ZIP code of recipient. (required)
     * @param  string $startParcelCenter ID of DHL parcel center where the shipment is initially dropped by the sender
     *     (required)
     * @param  \DateTime $startDate Day when the shipment will be dropped be the sender in the DHL parcel center
     *     (required)
     * @param  string $xRequestID HTTP-Header for HTTP request correlation (optional)
     *
     * @throws \Dhl\Versenden\Cig\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Dhl\Versenden\Cig\Model\DeliveryDayEstimation
     */
    public function checkoutRecipientZipDeliveryDayEstimationGet(
        $xEKP,
        $recipientZip,
        $startParcelCenter,
        $startDate,
        $xRequestID = null
    ) {
        list($response) = $this->checkoutRecipientZipDeliveryDayEstimationGetWithHttpInfo(
            $xEKP,
            $recipientZip,
            $startParcelCenter,
            $startDate,
            $xRequestID
        );

        return $response;
    }

    /**
     * Operation checkoutRecipientZipDeliveryDayEstimationGetWithHttpInfo
     *
     * Queries estimation of delivery day in checkout
     *
     * @param  string $xEKP DHL customer number of the sender (required)
     * @param  string $recipientZip ZIP code of recipient. (required)
     * @param  string $startParcelCenter ID of DHL parcel center where the shipment is initially dropped by the sender
     *     (required)
     * @param  \DateTime $startDate Day when the shipment will be dropped be the sender in the DHL parcel center
     *     (required)
     * @param  string $xRequestID HTTP-Header for HTTP request correlation (optional)
     *
     * @throws \Dhl\Versenden\Cig\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Dhl\Versenden\Cig\Model\DeliveryDayEstimation, HTTP status code, HTTP response headers (array
     *     of strings)
     */
    public function checkoutRecipientZipDeliveryDayEstimationGetWithHttpInfo(
        $xEKP,
        $recipientZip,
        $startParcelCenter,
        $startDate,
        $xRequestID = null
    ) {
        $returnType = '\Dhl\Versenden\Cig\Model\DeliveryDayEstimation';
        $request = $this->checkoutRecipientZipDeliveryDayEstimationGetRequest(
            $xEKP,
            $recipientZip,
            $startParcelCenter,
            $startDate,
            $xRequestID
        );

        try {
            try {
                $request->sendRequest(true);
            } catch (\HttpException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $request->getResponseHeader() ?: null,
                    $request->getResponseBody() ?: null
                );
            }

            $statusCode = $request->getResponseCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUrl()
                    ),
                    $statusCode,
                    $request->getResponseHeader(),
                    $request->getResponseBody()
                );
            }

            $responseBody = $request->getResponseBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $request->getResponseCode(),
                $request->getResponseHeader(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dhl\Versenden\Cig\Model\DeliveryDayEstimation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dhl\Versenden\Cig\Model\Status',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Create request for operation 'checkoutRecipientZipDeliveryDayEstimationGet'
     *
     * @param  string $xEKP DHL customer number of the sender (required)
     * @param  string $recipientZip ZIP code of recipient. (required)
     * @param  string $startParcelCenter ID of DHL parcel center where the shipment is initially dropped by the sender
     *     (required)
     * @param  \DateTime $startDate Day when the shipment will be dropped be the sender in the DHL parcel center
     *     (required)
     * @param  string $xRequestID HTTP-Header for HTTP request correlation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \HTTP_Request
     */
    protected function checkoutRecipientZipDeliveryDayEstimationGetRequest(
        $xEKP,
        $recipientZip,
        $startParcelCenter,
        $startDate,
        $xRequestID = null
    ) {
        // verify the required parameter 'xEKP' is set
        if ($xEKP === null || (is_array($xEKP) && count($xEKP) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xEKP when calling checkoutRecipientZipDeliveryDayEstimationGet'
            );
        }
        // verify the required parameter 'recipientZip' is set
        if ($recipientZip === null || (is_array($recipientZip) && count($recipientZip) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recipientZip when calling checkoutRecipientZipDeliveryDayEstimationGet'
            );
        }
        if (!preg_match("/^[0-9]{5}$/", $recipientZip)) {
            throw new \InvalidArgumentException(
                "invalid value for \"recipientZip\" when calling CheckoutApi.checkoutRecipientZipDeliveryDayEstimationGet, must conform to the pattern /^[0-9]{5}$/."
            );
        }

        // verify the required parameter 'startParcelCenter' is set
        if ($startParcelCenter === null || (is_array($startParcelCenter) && count($startParcelCenter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $startParcelCenter when calling checkoutRecipientZipDeliveryDayEstimationGet'
            );
        }
        if (!preg_match("/^[0-9]{2}$/", $startParcelCenter)) {
            throw new \InvalidArgumentException(
                "invalid value for \"startParcelCenter\" when calling CheckoutApi.checkoutRecipientZipDeliveryDayEstimationGet, must conform to the pattern /^[0-9]{2}$/."
            );
        }

        // verify the required parameter 'startDate' is set
        if ($startDate === null || (is_array($startDate) && count($startDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $startDate when calling checkoutRecipientZipDeliveryDayEstimationGet'
            );
        }
        $request = new \HTTP_Request();
        $resourcePath = '/checkout/{recipientZip}/deliveryDayEstimation';
        $queryParams = [];

        // query params
        if ($startParcelCenter !== null) {
            $queryParams['startParcelCenter'] = ObjectSerializer::toQueryValue($startParcelCenter);
        }
        // query params
        if ($startDate !== null) {
            $queryParams['startDate'] = ObjectSerializer::toQueryValue($startDate);
        }
        // header params
        if ($xRequestID !== null) {
//            $headerParams['X-Request-ID'] = ObjectSerializer::toHeaderValue($xRequestID);
            $request->addHeader('X-Request-ID', $xRequestID);
        }
        // header params
        if ($xEKP !== null) {
//            $headerParams['X-EKP'] = ObjectSerializer::toHeaderValue($xEKP);
            $request->addHeader('X-EKP', ObjectSerializer::toHeaderValue($xEKP));
        }

        // path params
        if ($recipientZip !== null) {
            $resourcePath = str_replace(
                '{' . 'recipientZip' . '}',
                ObjectSerializer::toPathValue($recipientZip),
                $resourcePath
            );
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $request->setBasicAuth($this->config->getUsername(), $this->config->getPassword());
//            $headers['Authorization'] = 'Basic ' . base64_encode(
//                    $this->config->getUsername() . ":" . $this->config->getPassword()
//                );
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('DPDHL-User-Authentication-Token');
        if ($apiKey !== null) {
//            $headers['DPDHL-User-Authentication-Token'] = $apiKey;
            $request->addHeader('DPDHL-User-Authentication-Token', $apiKey);
        }

        $query = http_build_query($queryParams);
        $request->setURL($this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''));
        return $request;
    }
}
